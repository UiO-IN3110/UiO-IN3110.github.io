gT back
gt forward


01_frontpage.rst
02_editors.rst
01_stencil.py    :%s/\v\[(.*), (.*)\]/[\2, \1]

02_substitute.py print(string.replace("spam", "ham"))

                 import re # on top
                 print(re.sub("spam", "ham", string))

		 .   any char  # to docstring
                 print(re.sub("s.am", "ham", string))



03_challenge.py print(re.sub("s.am", "ham", string)) 
                 
		  \w  word char       [a-zA-Z0-9]   # to docstring, might be problematic with unicode, special norwegian characters
		  print(re.sub(r"sp\wm", "ham", string))  # Note the r to make this a raw string


		  \W  not word char       [^a-zA-Z0-9]   # to docstring
		  print(re.sub(r"sp\Wm", "ham", string))  


		  \d  digit char       [0-9]   # to docstring
		  print(re.sub(r"sp\dm", "ham", string)) 
		  print(re.sub(r"sp\wm", "ham", string)) 
		  wrint(re.sub(r"sp\Wm", "ham", string)) 
		  wrint(re.sub(r"sp\.m", "ham", string)) 
		  

                  ######## Find occurances instead of replacing
		  print(re.findall(r"sp\dm", string))

03_cancels.rst

04_validate_mac.py   
                ########### # Test driven development
                Add 
		>>> print(is_valid_mac(addresses))
		and 
		if __name__ == "__main__":            
                    import doctest
                    doctest.testmod()
		# See that test fails 

                 
               ### First try
               regex = r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w"
               matches = [re.findall(regex, address) for address in addresses]
               matches = [match != [] for match in matches]
               return matches

               ############## Problem: Last MAC has invalid characters
               Solution:
		char = r"[0-9a-fA-F]"
		regex = ":".join([char*2]*6)
               
            
               ############## Problem: does not handle long mac
05_anchors.rst
               Anchor characters - does not match a literar character

                

04_validate_mac.py #### Add anchors to MAC
		regex = "^" + regex + "$"
               
              
05_caveats.py  ############## Multiline text!
               Need to add "flags=re.MULTILINE" to regex.findall

06_validate_ip.py  ############# Initial version
               char = "\d"
               regex = ":".join([char*3]*4)
               regex = "^" + regex + "$"
               matches = [re.findall(regex, address) for address in addresses]
               matches = [match != [] for match in matches]
               return matches

               #### Problem:  First IP address is valid.
               # Solution: add modifier!
               char = "\d+"        # One or more
               char = "\d*"        # Zero or more
               char = "\d{1,3}"    # Custom quantifiers


06_quantifiers.rst  # No need to memorize all of these - look them up when needed. 


06_validate_ip.py  ############# Problem: "256.000.000.001" does not match

07_grouping1.rst  # Groups defines units

06_validate_ip.py  ############# Replace join 
               regex = "^\d{1,3}(?:\.\d{1,3}){1,3}$"


08_grouping2.rst  # Grouping to introduces alternative branches (if statements)


06_validate_ip.py  ############# Fix full example
               char = r"(?:25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])"
               regex = rf"^{char}(?:\.{char}){{1,3}}$"
               #regex = r"^%s(?:\.%s){1,3}$" % (char, char)


09_grouping3.rst    ########### Back-referencing

               \0 is a sepcial command that matches the full string
               :%s/\vgroups/\0Hallo
               Alternative
               :%s/\v(groups)/\1Hallo

06_validate_ip.py  ############# Fix full example
               regex = r"(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])(?:\.\1){3}$"
               # But: This only matches to "25.25.25.25"


01_stencil.py    #########333 Demo case again
              :%s/\v\[(.+), (.+)\]/[\2, \1]


Babynames:
              :%s/\v\D*(\d+).{9}(\w+).{9}(\w+).*/\1, \2, \3




